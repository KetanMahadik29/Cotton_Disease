import heapq

def a_star(graph, start, goal, h):
    open_list = [(0, start)]
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    came_from = {}

    while open_list:
        _, current = heapq.heappop(open_list)
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return [start] + path[::-1]

        for neighbor, cost in graph[current].items():
            tentative_g = g_score[current] + cost
            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                heapq.heappush(open_list, (tentative_g + h[neighbor], neighbor))
    return None

# Example usage
if __name__ == "__main__":
    graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'D': 2, 'E': 5},
        'C': {'A': 4, 'F': 3},
        'D': {'B': 2},
        'E': {'B': 5, 'F': 1},
        'F': {'C': 3, 'E': 1}
    }

    h = {'A': 7, 'B': 6, 'C': 2, 'D': 5, 'E': 3, 'F': 0}
    path = a_star(graph, 'A', 'F', h)

    print("Path found:" if path else "No path found", path)
